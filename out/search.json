[
  {
    "objectID": "analysis/trade/index.html",
    "href": "analysis/trade/index.html",
    "title": "Trade of nuclear commodities",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(here)\n\n\nhere() starts at /workspaces/report-nuclearpower\n\n\nFirst, let’s download the data from the European Commission:\n\n\nCode\nbase_url &lt;-\n  \"https://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/NUCLEAR-TRADE-ATLAS/\"\ndest_path &lt;- here(\"data\", \"raw\")\n\nfiles &lt;- tibble(\n  file = \"NUCLEAR_TRADE_ATLAS_DATA_2023.zip\",\n  url = paste0(base_url, file),\n  dest = file.path(dest_path, file))\n\n# download and unzip the files if the csvs don't exist\nif (!all(file.exists(files$dest))) {\n  dir.create(dest_path, showWarnings = FALSE)\n  files |&gt;\n    mutate(\n      dl = walk2(url, dest, download.file),\n      unzip = walk(dest, unzip, exdir = dest_path))\n}\n\n\nLet’s open the two files up:\n\n\nCode\ntibble(\n  path = list.files(dest_path, pattern = glob2rx(\"*.csv\"), full.names = TRUE)) |&gt;\n  mutate(data = map(path, read_csv)) |&gt;\n  unnest(data) |&gt;\n  janitor::clean_names() -&gt;\nall_data\n\n\nRows: 96210 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): COMMODITY DESCRIPTION, FLOW, NUCLEAR COMMODITY DESCRIPTION, PARTNE...\ndbl  (3): COMMODITY CODE, QUANTITY KG, VALUE USD\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNigel Marks from Curtin University has helped us classify the commodities described in the commodity_code, commodity_description and nuclear_commodity_description columns.\n\n\nCode\nhere(\"data\", \"nuclear-commodity-categories.csv\") |&gt;\n  read_csv() |&gt;\n  print() |&gt;\n  select(-nuclear_commodity_description) -&gt;\ncategories\n\n\nRows: 22 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): nuclear_commodity_description, category\ndbl (1): commodity_code\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 22 × 3\n   commodity_code nuclear_commodity_description     category                    \n            &lt;dbl&gt; &lt;chr&gt;                             &lt;chr&gt;                       \n 1          2844. Radioactive elements and isotopes Unclear - perhaps ignore    \n 2          8401. Fuel elements, non-irradiated     Fuel fabrication            \n 3          8102. Tungsten articles                 Ignore - probably related t…\n 4          8112. Beryllium                         Probably ignore             \n 5          8112. Beryllium                         Probably ignore             \n 6          8112. Beryllium                         Probably ignore             \n 7          2844. Depleted uranium; thorium         Enrichment                  \n 8          2844. Enriched uranium; plutonium       Enrichment                  \n 9          2845. Heavy water                       Power Plant                 \n10          2844. Irradiated fuel elements          Spent Fuel / HLW            \n# ℹ 12 more rows\n\n\nWe’ll have a look at the commodities marked “Ignore” as well to see how they big they are, but we’re approaching on the assumption that they’re mostly not related to fission.\nLet’s merge those categories in:\n\n\nCode\nall_data |&gt;\n  left_join(categories, join_by(commodity_code), multiple = \"all\",\n    unmatched = \"error\") |&gt;\n  glimpse() -&gt;\njoined_data\n\n\nRows: 96,210\nColumns: 15\n$ path                          &lt;chr&gt; \"/workspaces/report-nuclearpower/data/ra…\n$ commodity_code                &lt;dbl&gt; 2844.40, 8401.30, 8101.99, 8101.99, 2844…\n$ commodity_description         &lt;chr&gt; \"Radioactive elements, isotopes and comp…\n$ flow                          &lt;chr&gt; \"Export\", \"Export\", \"Export\", \"Export\", …\n$ nuclear_commodity_description &lt;chr&gt; \"Radioactive elements and isotopes\", \"Fu…\n$ partner                       &lt;chr&gt; \"Libya\", \"Sudan\", \"Niger\", \"Ethiopia\", \"…\n$ partner_iso2                  &lt;chr&gt; \"LY\", \"SD\", \"NE\", \"ET\", \"DZ\", \"EG\", \"MA\"…\n$ partner_iso3                  &lt;chr&gt; \"LBY\", \"SDN\", \"NER\", \"ETH\", \"DZA\", \"EGY\"…\n$ period                        &lt;chr&gt; \"12/31/2017\", \"12/31/2017\", \"12/31/2017\"…\n$ reporter                      &lt;chr&gt; \"Tunisia\", \"Egypt\", \"Algeria\", \"Egypt\", …\n$ reporter_iso2                 &lt;chr&gt; \"TN\", \"EG\", \"DZ\", \"EG\", \"ZA\", \"ZA\", \"ZA\"…\n$ reporter_iso3                 &lt;chr&gt; \"TUN\", \"EGY\", \"DZA\", \"EGY\", \"ZAF\", \"ZAF\"…\n$ quantity_kg                   &lt;dbl&gt; 231, 0, 90, 1, 10, 272, 108, 100, 1, 968…\n$ value_usd                     &lt;dbl&gt; 69653, 30, 164, 32, 53930, 20071, 19889,…\n$ category                      &lt;chr&gt; \"Unclear - perhaps ignore\", \"Fuel fabric…\n\n\nWe’ll also rearrange the countries slightly. In Comtrade, the database from which this Atlas is derived:\n\nexports are trades from the reporter to the partner (ie. the reporter in the source and the partner is the recipient), while\nimports go from the partner to the reporter (ie. the reporter is the recipient and the partner is the source).\n\nLet’s derive the source and recipient:\n\n\nCode\njoined_data |&gt;\n  mutate(\n    source = if_else(flow == \"Export\", reporter, partner),\n    source_iso3 = if_else(flow == \"Export\", reporter_iso3, partner_iso3),\n    recipient = if_else(flow == \"Export\", partner, reporter),\n    recipient_iso3 = if_else(flow == \"Export\", partner_iso3, reporter_iso3)) -&gt;\nmapped_data\n\n\nNow we’ll sum up commodities within each category (still split by year and by trading partners):\n\n\nCode\nmapped_data |&gt;\n  # lump all the \"ignore\" categories together\n  mutate(category = if_else(\n    str_detect(category, fixed(\"ignore\", ignore_case = TRUE)),\n    \"Ignore\",\n    category)) |&gt;\n  # all period dates are dec 31 for that year\n  mutate(year = year(mdy(period))) |&gt;\n  # sum up all commodities within category\n  group_by(source, source_iso3, recipient, recipient_iso3, year, category, flow) |&gt;\n  summarise(\n    value_usd = sum(value_usd, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  select(-flow) |&gt;\n  distinct(.keep_all = TRUE) |&gt;\n  write_csv(here(\"data\", \"nuclear-commodity-data.csv\")) -&gt;\ncategory_data\n\n\n`summarise()` has grouped output by 'source', 'source_iso3', 'recipient',\n'recipient_iso3', 'year', 'category'. You can override using the `.groups`\nargument.\n\n\nNow let’s sum it up across years, too:\n\n\nCode\ncategory_data |&gt;\n  group_by(source, source_iso3, recipient, recipient_iso3, category) |&gt;\n  summarise(sum_value_usd = sum(value_usd, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  write_csv(here(\"data\", \"nuclear-commodity-data-allyears2023.csv\")) -&gt;\nallyears_data\n\n\n`summarise()` has grouped output by 'source', 'source_iso3', 'recipient',\n'recipient_iso3'. You can override using the `.groups` argument."
  },
  {
    "objectID": "analysis/trade/index.html#setup",
    "href": "analysis/trade/index.html#setup",
    "title": "Trade of nuclear commodities",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(here)\n\n\nhere() starts at /workspaces/report-nuclearpower\n\n\nFirst, let’s download the data from the European Commission:\n\n\nCode\nbase_url &lt;-\n  \"https://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/NUCLEAR-TRADE-ATLAS/\"\ndest_path &lt;- here(\"data\", \"raw\")\n\nfiles &lt;- tibble(\n  file = \"NUCLEAR_TRADE_ATLAS_DATA_2023.zip\",\n  url = paste0(base_url, file),\n  dest = file.path(dest_path, file))\n\n# download and unzip the files if the csvs don't exist\nif (!all(file.exists(files$dest))) {\n  dir.create(dest_path, showWarnings = FALSE)\n  files |&gt;\n    mutate(\n      dl = walk2(url, dest, download.file),\n      unzip = walk(dest, unzip, exdir = dest_path))\n}\n\n\nLet’s open the two files up:\n\n\nCode\ntibble(\n  path = list.files(dest_path, pattern = glob2rx(\"*.csv\"), full.names = TRUE)) |&gt;\n  mutate(data = map(path, read_csv)) |&gt;\n  unnest(data) |&gt;\n  janitor::clean_names() -&gt;\nall_data\n\n\nRows: 96210 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): COMMODITY DESCRIPTION, FLOW, NUCLEAR COMMODITY DESCRIPTION, PARTNE...\ndbl  (3): COMMODITY CODE, QUANTITY KG, VALUE USD\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNigel Marks from Curtin University has helped us classify the commodities described in the commodity_code, commodity_description and nuclear_commodity_description columns.\n\n\nCode\nhere(\"data\", \"nuclear-commodity-categories.csv\") |&gt;\n  read_csv() |&gt;\n  print() |&gt;\n  select(-nuclear_commodity_description) -&gt;\ncategories\n\n\nRows: 22 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): nuclear_commodity_description, category\ndbl (1): commodity_code\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 22 × 3\n   commodity_code nuclear_commodity_description     category                    \n            &lt;dbl&gt; &lt;chr&gt;                             &lt;chr&gt;                       \n 1          2844. Radioactive elements and isotopes Unclear - perhaps ignore    \n 2          8401. Fuel elements, non-irradiated     Fuel fabrication            \n 3          8102. Tungsten articles                 Ignore - probably related t…\n 4          8112. Beryllium                         Probably ignore             \n 5          8112. Beryllium                         Probably ignore             \n 6          8112. Beryllium                         Probably ignore             \n 7          2844. Depleted uranium; thorium         Enrichment                  \n 8          2844. Enriched uranium; plutonium       Enrichment                  \n 9          2845. Heavy water                       Power Plant                 \n10          2844. Irradiated fuel elements          Spent Fuel / HLW            \n# ℹ 12 more rows\n\n\nWe’ll have a look at the commodities marked “Ignore” as well to see how they big they are, but we’re approaching on the assumption that they’re mostly not related to fission.\nLet’s merge those categories in:\n\n\nCode\nall_data |&gt;\n  left_join(categories, join_by(commodity_code), multiple = \"all\",\n    unmatched = \"error\") |&gt;\n  glimpse() -&gt;\njoined_data\n\n\nRows: 96,210\nColumns: 15\n$ path                          &lt;chr&gt; \"/workspaces/report-nuclearpower/data/ra…\n$ commodity_code                &lt;dbl&gt; 2844.40, 8401.30, 8101.99, 8101.99, 2844…\n$ commodity_description         &lt;chr&gt; \"Radioactive elements, isotopes and comp…\n$ flow                          &lt;chr&gt; \"Export\", \"Export\", \"Export\", \"Export\", …\n$ nuclear_commodity_description &lt;chr&gt; \"Radioactive elements and isotopes\", \"Fu…\n$ partner                       &lt;chr&gt; \"Libya\", \"Sudan\", \"Niger\", \"Ethiopia\", \"…\n$ partner_iso2                  &lt;chr&gt; \"LY\", \"SD\", \"NE\", \"ET\", \"DZ\", \"EG\", \"MA\"…\n$ partner_iso3                  &lt;chr&gt; \"LBY\", \"SDN\", \"NER\", \"ETH\", \"DZA\", \"EGY\"…\n$ period                        &lt;chr&gt; \"12/31/2017\", \"12/31/2017\", \"12/31/2017\"…\n$ reporter                      &lt;chr&gt; \"Tunisia\", \"Egypt\", \"Algeria\", \"Egypt\", …\n$ reporter_iso2                 &lt;chr&gt; \"TN\", \"EG\", \"DZ\", \"EG\", \"ZA\", \"ZA\", \"ZA\"…\n$ reporter_iso3                 &lt;chr&gt; \"TUN\", \"EGY\", \"DZA\", \"EGY\", \"ZAF\", \"ZAF\"…\n$ quantity_kg                   &lt;dbl&gt; 231, 0, 90, 1, 10, 272, 108, 100, 1, 968…\n$ value_usd                     &lt;dbl&gt; 69653, 30, 164, 32, 53930, 20071, 19889,…\n$ category                      &lt;chr&gt; \"Unclear - perhaps ignore\", \"Fuel fabric…\n\n\nWe’ll also rearrange the countries slightly. In Comtrade, the database from which this Atlas is derived:\n\nexports are trades from the reporter to the partner (ie. the reporter in the source and the partner is the recipient), while\nimports go from the partner to the reporter (ie. the reporter is the recipient and the partner is the source).\n\nLet’s derive the source and recipient:\n\n\nCode\njoined_data |&gt;\n  mutate(\n    source = if_else(flow == \"Export\", reporter, partner),\n    source_iso3 = if_else(flow == \"Export\", reporter_iso3, partner_iso3),\n    recipient = if_else(flow == \"Export\", partner, reporter),\n    recipient_iso3 = if_else(flow == \"Export\", partner_iso3, reporter_iso3)) -&gt;\nmapped_data\n\n\nNow we’ll sum up commodities within each category (still split by year and by trading partners):\n\n\nCode\nmapped_data |&gt;\n  # lump all the \"ignore\" categories together\n  mutate(category = if_else(\n    str_detect(category, fixed(\"ignore\", ignore_case = TRUE)),\n    \"Ignore\",\n    category)) |&gt;\n  # all period dates are dec 31 for that year\n  mutate(year = year(mdy(period))) |&gt;\n  # sum up all commodities within category\n  group_by(source, source_iso3, recipient, recipient_iso3, year, category, flow) |&gt;\n  summarise(\n    value_usd = sum(value_usd, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  select(-flow) |&gt;\n  distinct(.keep_all = TRUE) |&gt;\n  write_csv(here(\"data\", \"nuclear-commodity-data.csv\")) -&gt;\ncategory_data\n\n\n`summarise()` has grouped output by 'source', 'source_iso3', 'recipient',\n'recipient_iso3', 'year', 'category'. You can override using the `.groups`\nargument.\n\n\nNow let’s sum it up across years, too:\n\n\nCode\ncategory_data |&gt;\n  group_by(source, source_iso3, recipient, recipient_iso3, category) |&gt;\n  summarise(sum_value_usd = sum(value_usd, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  write_csv(here(\"data\", \"nuclear-commodity-data-allyears2023.csv\")) -&gt;\nallyears_data\n\n\n`summarise()` has grouped output by 'source', 'source_iso3', 'recipient',\n'recipient_iso3'. You can override using the `.groups` argument."
  },
  {
    "objectID": "analysis/use/index.html",
    "href": "analysis/use/index.html",
    "title": "Use of nuclear energy",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n# library(glue)\n# library(sf)\n# library(rgeoboundaries)\nlibrary(countrycode)\n# library(lwgeom)\n# library(jsonlite)\nlibrary(here)\n\n\nhere() starts at /workspaces/report-nuclearpower\n\n\nThe data here is from the International Renewable Energy Agency.\nThe tables (which can be updated by downloading them from IRENASTAT and placing them in data as irena-src-[measure][grid_status].csv) are:\n\nInstalled electricity capacity by country/area (MW) by Country/area, Technology, Grid connection and Year\nElectricity generation (GWh) by Country/area, Technology, Grid connection and Year\n\n\n\nCode\ntibble(\n  path = list.files(here(\"data\"), full.names = TRUE,\n    pattern = glob2rx(\"irena-src-*.csv\")),\n  filename = basename(path)) |&gt;\n  mutate(\n    data = map(path, read_csv,\n      skip = 3,\n      col_names = c(\"country\", \"tech\", \"grid\", \"year\", \"value\"),\n      col_types = \"cccid\",\n      na = c(\"\", \"NA\", \"..\"))) |&gt;\n  separate(filename,\n    into = c(\"irena\", \"src\", \"measure\", \"grid\", \"ext\"), sep = \"[-.]\") |&gt;\n  select(measure, data) |&gt;\n  unnest(data) -&gt;\nirena_bound\n\n\nWe’re going to classify these sources as either Nuclear, renewable or non-renewable.\n\n\nCode\nirena_bound |&gt;\n  mutate(\n    energy_type = case_match(tech,\n      c(\n        \"Solar photovoltaic\",   \"Solar thermal energy\",\n        \"Onshore wind energy\",  \"Offshore wind energy\",\n        \"Renewable hydropower\", \"Mixed Hydro Plants\",\n        \"Pumped storage\",       \"Marine energy\",\n        \"Solid biofuels\",       \"Renewable municipal waste\",\n        \"Liquid biofuels\",      \"Biogas\",\n        \"Geothermal energy\") ~ \"renewable\",\n      \"Nuclear\" ~ \"nuclear\",\n      .default = \"nonrenewable\")) |&gt;\n  # calculate the amount and proportion in each tech bucket\n  group_by(measure, country, year, energy_type) |&gt;\n  summarise(amount = sum(value, na.rm = TRUE)) |&gt;\n  mutate(prop = amount / sum(amount, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  # pivot out the amounts and proportions by tech type\n  mutate(measure = recode(measure,\n    \"generation\" = \"totalgen.gwh\", \"capacity\" = \"totalcap.mw\")) |&gt;\n  pivot_wider(\n    id_cols = c(country, year),\n    names_from = c(measure, energy_type), names_sep = \"_\",\n    values_from = c(amount, prop)) -&gt;\nirena_wide\n\n\n`summarise()` has grouped output by 'measure', 'country', 'year'. You can\noverride using the `.groups` argument.\n\n\nFinally, we also need ISO codes and centroids for the new data. I’m going to use nuclear-commodity-centroids, which has country names and ISO3 codes.\n\n\nCode\nhere(\"data\", \"nuclear-commodity-centroids.csv\") |&gt;\n  read_csv() -&gt;\ncentroids\n\n\nRows: 245 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): iso3, name\ndbl (2): lat, lon\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nirena_wide |&gt;\n  left_join(centroids, join_by(country == name), multiple = \"all\",\n    unmatched = \"drop\") -&gt;\nirena_centroids\n\n\nWarning in left_join(irena_wide, centroids, join_by(country == name), multiple = \"all\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 3750 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nCode\n# check the unmatched countries\nirena_wide |&gt;\n  anti_join(centroids, join_by(country == name)) -&gt;\nunmatched\n\nunmatched |&gt; pull(country) |&gt; unique()\n\n\n [1] \"Anguilla\"                                                  \n [2] \"Antigua and Barbuda\"                                       \n [3] \"Bahamas (the)\"                                             \n [4] \"Bolivia (Plurinational State of)\"                          \n [5] \"Bonaire, Sint Eustatius and Saba\"                          \n [6] \"Bosnia and Herzegovina\"                                    \n [7] \"British Virgin Islands\"                                    \n [8] \"Brunei Darussalam\"                                         \n [9] \"Cayman Islands\"                                            \n[10] \"Central African Republic (the)\"                            \n[11] \"China, Hong Kong Special Administrative Region\"            \n[12] \"Chinese Taipei\"                                            \n[13] \"Comoros (the)\"                                             \n[14] \"Congo (the)\"                                               \n[15] \"Cook Islands (the)\"                                        \n[16] \"Cura�ao\"                                                   \n[17] \"C�te d'Ivoire\"                                             \n[18] \"Democratic People's Republic of Korea (the)\"               \n[19] \"Democratic Republic of the Congo (the)\"                    \n[20] \"Dominican Republic (the)\"                                  \n[21] \"Eswatini\"                                                  \n[22] \"Falkland Islands (Malvinas)\"                               \n[23] \"Faroe Islands\"                                             \n[24] \"French Guiana\"                                             \n[25] \"Gambia (the)\"                                              \n[26] \"Guadeloupe\"                                                \n[27] \"Iran (Islamic Republic of)\"                                \n[28] \"Lao People's Democratic Republic (the)\"                    \n[29] \"Marshall Islands (the)\"                                    \n[30] \"Martinique\"                                                \n[31] \"Mayotte\"                                                   \n[32] \"Micronesia (Federated States of)\"                          \n[33] \"Montserrat\"                                                \n[34] \"Myanmar\"                                                   \n[35] \"Netherlands (Kingdom of the)\"                              \n[36] \"Niger (the)\"                                               \n[37] \"Niue\"                                                      \n[38] \"North Macedonia\"                                           \n[39] \"Philippines (the)\"                                         \n[40] \"Puerto Rico\"                                               \n[41] \"Republic of Korea (the)\"                                   \n[42] \"Republic of Moldova (the)\"                                 \n[43] \"Russian Federation (the)\"                                  \n[44] \"R�union\"                                                   \n[45] \"Saint Barth�lemy\"                                          \n[46] \"Saint Kitts and Nevis\"                                     \n[47] \"Saint Lucia\"                                               \n[48] \"Saint Martin (French Part)\"                                \n[49] \"Saint Vincent and the Grenadines\"                          \n[50] \"Sao Tome and Principe\"                                     \n[51] \"Sint Maarten (Dutch Part)\"                                 \n[52] \"Solomon Islands\"                                           \n[53] \"South Georgia and the South Sandwich Islands\"              \n[54] \"State of Palestine (the)\"                                  \n[55] \"Sudan (the)\"                                               \n[56] \"Syrian Arab Republic (the)\"                                \n[57] \"Trinidad and Tobago\"                                       \n[58] \"Turks and Caicos Islands\"                                  \n[59] \"T�rkiye\"                                                   \n[60] \"United Arab Emirates (the)\"                                \n[61] \"United Kingdom of Great Britain and Northern Ireland (the)\"\n[62] \"United Republic of Tanzania (the)\"                         \n[63] \"United States Virgin Islands\"                              \n[64] \"United States of America (the)\"                            \n[65] \"Venezuela (Bolivarian Republic of)\"                        \n[66] \"Viet Nam\"                                                  \n\n\nOkay, we have a lot of unmatched countries — 66! Matching using country name often goes askew 😅 Let’s see if the {countrycode} package can do any better:\n\n\nCode\nirena_wide |&gt;\n  mutate(iso3_countrycode = countrycode(country, \"country.name\", \"iso3c\")) |&gt;\n  filter(is.na(iso3_countrycode)) |&gt;\n  select(country, iso3_countrycode) |&gt;\n  distinct()\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `iso3_countrycode = countrycode(country, \"country.name\",\n  \"iso3c\")`.\nCaused by warning:\n! Some values were not matched unambiguously: Cura�ao, Kosovo, R�union, Saint Barth�lemy, T�rkiye\n\n\n# A tibble: 5 × 2\n  country          iso3_countrycode\n  &lt;chr&gt;            &lt;chr&gt;           \n1 Cura�ao          &lt;NA&gt;            \n2 Kosovo           &lt;NA&gt;            \n3 R�union          &lt;NA&gt;            \n4 Saint Barth�lemy &lt;NA&gt;            \n5 T�rkiye          &lt;NA&gt;            \n\n\nCountrycode warns about a few match failures (just a few now!), but these mostly appear to be the result of a text encoding error (ie. the source files aren’t UTF-8).\nI’m having some trouble getting purrr::map to work with different encodings, so I might just patch these manually and move on. Let’s also get rid of (the) and (... of):\n\n\nCode\nirena_wide |&gt;\n  mutate(\n    country = case_match(country,\n      \"Cura�ao\" ~ \"Curacao\" ,\n      \"Saint Barth�lemy\" ~ \"Saint Barthélemy\",\n      \"T�rkiye\" ~ \"Turkey\",\n      .default = country),\n    iso3_countrycode = countrycode(country, \"country.name\", \"iso3c\")) |&gt;\n  left_join(centroids, join_by(iso3_countrycode == iso3), multiple = \"all\",\n    unmatched = \"drop\") |&gt;\n  select(-name) |&gt;\n  select(iso3_countrycode, country, lat, lon, year, everything()) -&gt;\nirena_centroids\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `iso3_countrycode = countrycode(country, \"country.name\",\n  \"iso3c\")`.\nCaused by warning:\n! Some values were not matched unambiguously: Kosovo, R�union\n\n\nStill a few non-matches (15), but most of them are quite small and difficult to match. Let’s write it out!\n\n\nCode\nirena_centroids |&gt;\n  write_csv(here(\"data\", \"irena-proportions.csv\"))\n\n# and also the latest data only\nlatest_year &lt;- max(irena_centroids$year, na.rm = TRUE)\nirena_centroids |&gt;\n  filter(year == max(year, na.rm = TRUE)) |&gt;\n  write_csv(here(\"data\", paste0(\"irena-proportions-\", latest_year, \".csv\")))"
  }
]