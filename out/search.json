[
  {
    "objectID": "analysis/trade/index.html",
    "href": "analysis/trade/index.html",
    "title": "Untitled",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(here)\n\n\nhere() starts at /workspaces/report-nuclearpower\n\n\nFirst, let’s download the data from the European Commission:\n\n\nCode\nbase_url &lt;-\n  \"https://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/NUCLEAR-TRADE-ATLAS/\"\ndest_path &lt;- here(\"data\", \"raw\")\n\nfiles &lt;- tibble(\n  file = c(\n    \"NUCLEAR_TRADE_ATLAS_DATA_2023.zip\",\n    \"NUCLEAR_TRADE_ATLAS_DATA_2022.zip\"),\n  url = paste0(base_url, file),\n  dest = file.path(dest_path, file))\n\n# download and unzip the files if the csvs don't exist\nif (!all(file.exists(files$dest))) {\n  dir.create(dest_path, showWarnings = FALSE)\n  files |&gt;\n    mutate(\n      dl = walk2(url, dest, download.file),\n      unzip = walk(dest, unzip, exdir = dest_path))\n}\n\n\nLet’s open the two files up:\n\n\nCode\ntibble(\n  path = list.files(dest_path, pattern = glob2rx(\"*.csv\"), full.names = TRUE)) |&gt;\n  mutate(data = map(path, read_csv)) |&gt;\n  unnest(data) |&gt;\n  janitor::clean_names() -&gt;\nall_data\n\n\nRows: 95332 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): COMMODITY DESCRIPTION, FLOW, NUCLEAR COMMODITY DESCRIPTION, PARTNE...\ndbl  (3): COMMODITY CODE, QUANTITY KG, VALUE USD\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 96210 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): COMMODITY DESCRIPTION, FLOW, NUCLEAR COMMODITY DESCRIPTION, PARTNE...\ndbl  (3): COMMODITY CODE, QUANTITY KG, VALUE USD\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNigel Marks from Curtin University has helped us classify the commodities described in the commodity_code, commodity_description and nuclear_commodity_description columns.\n\n\nCode\nhere(\"data\", \"nuclear-commodity-categories.csv\") |&gt;\n  read_csv() |&gt;\n  print() |&gt;\n  select(-nuclear_commodity_description) -&gt;\ncategories\n\n\nRows: 22 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): nuclear_commodity_description, category\ndbl (1): commodity_code\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 22 × 3\n   commodity_code nuclear_commodity_description     category                    \n            &lt;dbl&gt; &lt;chr&gt;                             &lt;chr&gt;                       \n 1          2844. Radioactive elements and isotopes Unclear - perhaps ignore    \n 2          8401. Fuel elements, non-irradiated     Fuel fabrication            \n 3          8102. Tungsten articles                 Ignore - probably related t…\n 4          8112. Beryllium                         Probably ignore             \n 5          8112. Beryllium                         Probably ignore             \n 6          8112. Beryllium                         Probably ignore             \n 7          2844. Depleted uranium; thorium         Enrichment                  \n 8          2844. Enriched uranium; plutonium       Enrichment                  \n 9          2845. Heavy water                       Power Plant                 \n10          2844. Irradiated fuel elements          Spent Fuel / HLW            \n# ℹ 12 more rows\n\n\nWe’ll have a look at the commodities marked “Ignore” as well to see how they big they are, but we’re approaching on the assumption that they’re mostly not related to fission.\nLet’s merge those categories in:\n\n\nCode\nall_data |&gt;\n  left_join(categories, join_by(commodity_code), multiple = \"all\",\n    unmatched = \"error\") |&gt;\n  glimpse() -&gt;\njoined_data\n\n\nRows: 191,542\nColumns: 15\n$ path                          &lt;chr&gt; \"/workspaces/report-nuclearpower/data/ra…\n$ commodity_code                &lt;dbl&gt; 2844.50, 2844.40, 2844.40, 2844.40, 8401…\n$ commodity_description         &lt;chr&gt; \"Spent \\\"irradiated\\\" fuel elements \\\"ca…\n$ flow                          &lt;chr&gt; \"Export\", \"Export\", \"Export\", \"Export\", …\n$ nuclear_commodity_description &lt;chr&gt; \"Irradiated fuel elements\", \"Radioactive…\n$ partner                       &lt;chr&gt; \"Morocco\", \"Egypt\", \"Libya\", \"Morocco\", …\n$ partner_iso2                  &lt;chr&gt; \"MA\", \"EG\", \"LY\", \"MA\", \"SD\", \"CI\", \"SD\"…\n$ partner_iso3                  &lt;chr&gt; \"MAR\", \"EGY\", \"LBY\", \"MAR\", \"SDN\", \"CIV\"…\n$ period                        &lt;chr&gt; \"12/31/2016\", \"12/31/2016\", \"12/31/2016\"…\n$ reporter                      &lt;chr&gt; \"Tunisia\", \"Tunisia\", \"Tunisia\", \"Tunisi…\n$ reporter_iso2                 &lt;chr&gt; \"TN\", \"TN\", \"TN\", \"TN\", \"EG\", \"MA\", \"EG\"…\n$ reporter_iso3                 &lt;chr&gt; \"TUN\", \"TUN\", \"TUN\", \"TUN\", \"EGY\", \"MAR\"…\n$ quantity_kg                   &lt;dbl&gt; 76, 110, 63, 89, 1907, 153, 110, 130, 12…\n$ value_usd                     &lt;dbl&gt; 3133, 7210, 14291, 16087, 27517, 1910, 2…\n$ category                      &lt;chr&gt; \"Spent Fuel / HLW\", \"Unclear - perhaps i…\n\n\nWe’ll also rearrange the countries slightly. In Comtrade, the database from which this Atlas is derived:\n\nexports are trades from the reporter to the partner (ie. the reporter in the source and the partner is the recipient), while\nimports go from the partner to the reporter (ie. the reporter is the recipient and the partner is the source).\n\nLet’s derive the source and recipient:\n\n\nCode\njoined_data |&gt;\n  mutate(\n    source = if_else(flow == \"Export\", reporter, partner),\n    source_iso3 = if_else(flow == \"Export\", reporter_iso3, partner_iso3),\n    recipient = if_else(flow == \"Export\", partner, reporter),\n    recipient_iso3 = if_else(flow == \"Export\", partner_iso3, reporter_iso3)) -&gt;\nmapped_data\n\n\nNow we’ll sum up commodities within each category (still split by year and by trading partners):\n\n\nCode\nmapped_data |&gt;\n  # lump all the \"ignore\" categories together\n  mutate(category = if_else(\n    str_detect(category, fixed(\"ignore\", ignore_case = TRUE)),\n    \"Ignore\",\n    category)) |&gt;\n  # all period dates are dec 31 for that year\n  mutate(year = year(mdy(period))) |&gt;\n  # sum up all commodities within category\n  group_by(source, source_iso3, recipient, recipient_iso3, year, category, flow) |&gt;\n  summarise(\n    value_usd = sum(value_usd, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  select(-flow) |&gt;\n  distinct(.keep_all = TRUE) |&gt;\n  write_csv(here(\"data\", \"nuclear-commodity-data.csv\")) -&gt;\ncategory_data\n\n\n`summarise()` has grouped output by 'source', 'source_iso3', 'recipient',\n'recipient_iso3', 'year', 'category'. You can override using the `.groups`\nargument.\n\n\nCode\ncategory_data |&gt; View()\n\n\nFinally, we need to get centroids for countries:"
  },
  {
    "objectID": "analysis/trade/index.html#setup",
    "href": "analysis/trade/index.html#setup",
    "title": "Untitled",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(here)\n\n\nhere() starts at /workspaces/report-nuclearpower\n\n\nFirst, let’s download the data from the European Commission:\n\n\nCode\nbase_url &lt;-\n  \"https://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/NUCLEAR-TRADE-ATLAS/\"\ndest_path &lt;- here(\"data\", \"raw\")\n\nfiles &lt;- tibble(\n  file = c(\n    \"NUCLEAR_TRADE_ATLAS_DATA_2023.zip\",\n    \"NUCLEAR_TRADE_ATLAS_DATA_2022.zip\"),\n  url = paste0(base_url, file),\n  dest = file.path(dest_path, file))\n\n# download and unzip the files if the csvs don't exist\nif (!all(file.exists(files$dest))) {\n  dir.create(dest_path, showWarnings = FALSE)\n  files |&gt;\n    mutate(\n      dl = walk2(url, dest, download.file),\n      unzip = walk(dest, unzip, exdir = dest_path))\n}\n\n\nLet’s open the two files up:\n\n\nCode\ntibble(\n  path = list.files(dest_path, pattern = glob2rx(\"*.csv\"), full.names = TRUE)) |&gt;\n  mutate(data = map(path, read_csv)) |&gt;\n  unnest(data) |&gt;\n  janitor::clean_names() -&gt;\nall_data\n\n\nRows: 95332 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): COMMODITY DESCRIPTION, FLOW, NUCLEAR COMMODITY DESCRIPTION, PARTNE...\ndbl  (3): COMMODITY CODE, QUANTITY KG, VALUE USD\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 96210 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): COMMODITY DESCRIPTION, FLOW, NUCLEAR COMMODITY DESCRIPTION, PARTNE...\ndbl  (3): COMMODITY CODE, QUANTITY KG, VALUE USD\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNigel Marks from Curtin University has helped us classify the commodities described in the commodity_code, commodity_description and nuclear_commodity_description columns.\n\n\nCode\nhere(\"data\", \"nuclear-commodity-categories.csv\") |&gt;\n  read_csv() |&gt;\n  print() |&gt;\n  select(-nuclear_commodity_description) -&gt;\ncategories\n\n\nRows: 22 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): nuclear_commodity_description, category\ndbl (1): commodity_code\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 22 × 3\n   commodity_code nuclear_commodity_description     category                    \n            &lt;dbl&gt; &lt;chr&gt;                             &lt;chr&gt;                       \n 1          2844. Radioactive elements and isotopes Unclear - perhaps ignore    \n 2          8401. Fuel elements, non-irradiated     Fuel fabrication            \n 3          8102. Tungsten articles                 Ignore - probably related t…\n 4          8112. Beryllium                         Probably ignore             \n 5          8112. Beryllium                         Probably ignore             \n 6          8112. Beryllium                         Probably ignore             \n 7          2844. Depleted uranium; thorium         Enrichment                  \n 8          2844. Enriched uranium; plutonium       Enrichment                  \n 9          2845. Heavy water                       Power Plant                 \n10          2844. Irradiated fuel elements          Spent Fuel / HLW            \n# ℹ 12 more rows\n\n\nWe’ll have a look at the commodities marked “Ignore” as well to see how they big they are, but we’re approaching on the assumption that they’re mostly not related to fission.\nLet’s merge those categories in:\n\n\nCode\nall_data |&gt;\n  left_join(categories, join_by(commodity_code), multiple = \"all\",\n    unmatched = \"error\") |&gt;\n  glimpse() -&gt;\njoined_data\n\n\nRows: 191,542\nColumns: 15\n$ path                          &lt;chr&gt; \"/workspaces/report-nuclearpower/data/ra…\n$ commodity_code                &lt;dbl&gt; 2844.50, 2844.40, 2844.40, 2844.40, 8401…\n$ commodity_description         &lt;chr&gt; \"Spent \\\"irradiated\\\" fuel elements \\\"ca…\n$ flow                          &lt;chr&gt; \"Export\", \"Export\", \"Export\", \"Export\", …\n$ nuclear_commodity_description &lt;chr&gt; \"Irradiated fuel elements\", \"Radioactive…\n$ partner                       &lt;chr&gt; \"Morocco\", \"Egypt\", \"Libya\", \"Morocco\", …\n$ partner_iso2                  &lt;chr&gt; \"MA\", \"EG\", \"LY\", \"MA\", \"SD\", \"CI\", \"SD\"…\n$ partner_iso3                  &lt;chr&gt; \"MAR\", \"EGY\", \"LBY\", \"MAR\", \"SDN\", \"CIV\"…\n$ period                        &lt;chr&gt; \"12/31/2016\", \"12/31/2016\", \"12/31/2016\"…\n$ reporter                      &lt;chr&gt; \"Tunisia\", \"Tunisia\", \"Tunisia\", \"Tunisi…\n$ reporter_iso2                 &lt;chr&gt; \"TN\", \"TN\", \"TN\", \"TN\", \"EG\", \"MA\", \"EG\"…\n$ reporter_iso3                 &lt;chr&gt; \"TUN\", \"TUN\", \"TUN\", \"TUN\", \"EGY\", \"MAR\"…\n$ quantity_kg                   &lt;dbl&gt; 76, 110, 63, 89, 1907, 153, 110, 130, 12…\n$ value_usd                     &lt;dbl&gt; 3133, 7210, 14291, 16087, 27517, 1910, 2…\n$ category                      &lt;chr&gt; \"Spent Fuel / HLW\", \"Unclear - perhaps i…\n\n\nWe’ll also rearrange the countries slightly. In Comtrade, the database from which this Atlas is derived:\n\nexports are trades from the reporter to the partner (ie. the reporter in the source and the partner is the recipient), while\nimports go from the partner to the reporter (ie. the reporter is the recipient and the partner is the source).\n\nLet’s derive the source and recipient:\n\n\nCode\njoined_data |&gt;\n  mutate(\n    source = if_else(flow == \"Export\", reporter, partner),\n    source_iso3 = if_else(flow == \"Export\", reporter_iso3, partner_iso3),\n    recipient = if_else(flow == \"Export\", partner, reporter),\n    recipient_iso3 = if_else(flow == \"Export\", partner_iso3, reporter_iso3)) -&gt;\nmapped_data\n\n\nNow we’ll sum up commodities within each category (still split by year and by trading partners):\n\n\nCode\nmapped_data |&gt;\n  # lump all the \"ignore\" categories together\n  mutate(category = if_else(\n    str_detect(category, fixed(\"ignore\", ignore_case = TRUE)),\n    \"Ignore\",\n    category)) |&gt;\n  # all period dates are dec 31 for that year\n  mutate(year = year(mdy(period))) |&gt;\n  # sum up all commodities within category\n  group_by(source, source_iso3, recipient, recipient_iso3, year, category, flow) |&gt;\n  summarise(\n    value_usd = sum(value_usd, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  select(-flow) |&gt;\n  distinct(.keep_all = TRUE) |&gt;\n  write_csv(here(\"data\", \"nuclear-commodity-data.csv\")) -&gt;\ncategory_data\n\n\n`summarise()` has grouped output by 'source', 'source_iso3', 'recipient',\n'recipient_iso3', 'year', 'category'. You can override using the `.groups`\nargument.\n\n\nCode\ncategory_data |&gt; View()\n\n\nFinally, we need to get centroids for countries:"
  }
]