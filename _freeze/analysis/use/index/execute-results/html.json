{
  "hash": "19164a7055778921043511ea8962c97f",
  "result": {
    "markdown": "---\ntitle: Use of nuclear energy\nsubtitle: Which countries produce the most nuclear power?\nformat:\n  360-analysis-html: default\nauthor: James Goldie\ndate: last-modified\ncode-fold: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n# library(glue)\n# library(sf)\n# library(rgeoboundaries)\nlibrary(countrycode)\n# library(lwgeom)\n# library(jsonlite)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /workspaces/report-nuclearpower\n```\n\n\n:::\n:::\n\n\nThe data here is from the [International Renewable Energy Agency](https://irena.org).\n\nThe tables (which can be updated by downloading them from [IRENASTAT](https://pxweb.irena.org/pxweb/en/IRENASTAT) and placing them in `data` as `irena-src-[measure][grid_status].csv`) are:\n\n* Installed electricity capacity by country/area (MW) by Country/area, Technology, Grid connection and Year\n* Electricity generation (GWh) by Country/area, Technology, Grid connection and Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  path = list.files(here(\"data\"), full.names = TRUE,\n    pattern = glob2rx(\"irena-src-*.csv\")),\n  filename = basename(path)) |>\n  mutate(\n    data = map(path, read_csv,\n      skip = 3,\n      col_names = c(\"country\", \"tech\", \"grid\", \"year\", \"value\"),\n      col_types = \"cccid\",\n      na = c(\"\", \"NA\", \"..\"))) |>\n  separate(filename,\n    into = c(\"irena\", \"src\", \"measure\", \"grid\", \"ext\"), sep = \"[-.]\") |>\n  select(measure, data) |>\n  unnest(data) ->\nirena_bound\n```\n:::\n\n\nWe're going to classify these sources as either Nuclear, renewable or non-renewable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nirena_bound |>\n  mutate(\n    energy_type = case_match(tech,\n      c(\n        \"Solar photovoltaic\",   \"Solar thermal energy\",\n        \"Onshore wind energy\",  \"Offshore wind energy\",\n        \"Renewable hydropower\", \"Mixed Hydro Plants\",\n        \"Pumped storage\",       \"Marine energy\",\n        \"Solid biofuels\",       \"Renewable municipal waste\",\n        \"Liquid biofuels\",      \"Biogas\",\n        \"Geothermal energy\") ~ \"renewable\",\n      \"Nuclear\" ~ \"nuclear\",\n      .default = \"nonrenewable\")) |>\n  # calculate the amount and proportion in each tech bucket\n  group_by(measure, country, year, energy_type) |>\n  summarise(amount = sum(value, na.rm = TRUE)) |>\n  mutate(prop = amount / sum(amount, na.rm = TRUE)) |>\n  ungroup() |>\n  # pivot out the amounts and proportions by tech type\n  mutate(measure = recode(measure,\n    \"generation\" = \"totalgen.gwh\", \"capacity\" = \"totalcap.mw\")) |>\n  pivot_wider(\n    id_cols = c(country, year),\n    names_from = c(measure, energy_type), names_sep = \"_\",\n    values_from = c(amount, prop)) ->\nirena_wide\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'measure', 'country', 'year'. You can\noverride using the `.groups` argument.\n```\n\n\n:::\n:::\n\n\nFinally, we also need ISO codes and centroids for the new data. I'm going to use `nuclear-commodity-centroids`, which has country names and ISO3 codes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere(\"data\", \"nuclear-commodity-centroids.csv\") |>\n  read_csv() ->\ncentroids\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 245 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): iso3, name\ndbl (2): lat, lon\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nirena_wide |>\n  left_join(centroids, join_by(country == name), multiple = \"all\",\n    unmatched = \"drop\") ->\nirena_centroids\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in left_join(irena_wide, centroids, join_by(country == name), multiple = \"all\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 3750 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n```{.r .cell-code}\n# check the unmatched countries\nirena_wide |>\n  anti_join(centroids, join_by(country == name)) ->\nunmatched\n\nunmatched |> pull(country) |> unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Anguilla\"                                                  \n [2] \"Antigua and Barbuda\"                                       \n [3] \"Bahamas (the)\"                                             \n [4] \"Bolivia (Plurinational State of)\"                          \n [5] \"Bonaire, Sint Eustatius and Saba\"                          \n [6] \"Bosnia and Herzegovina\"                                    \n [7] \"British Virgin Islands\"                                    \n [8] \"Brunei Darussalam\"                                         \n [9] \"Cayman Islands\"                                            \n[10] \"Central African Republic (the)\"                            \n[11] \"China, Hong Kong Special Administrative Region\"            \n[12] \"Chinese Taipei\"                                            \n[13] \"Comoros (the)\"                                             \n[14] \"Congo (the)\"                                               \n[15] \"Cook Islands (the)\"                                        \n[16] \"Cura�ao\"                                                   \n[17] \"C�te d'Ivoire\"                                             \n[18] \"Democratic People's Republic of Korea (the)\"               \n[19] \"Democratic Republic of the Congo (the)\"                    \n[20] \"Dominican Republic (the)\"                                  \n[21] \"Eswatini\"                                                  \n[22] \"Falkland Islands (Malvinas)\"                               \n[23] \"Faroe Islands\"                                             \n[24] \"French Guiana\"                                             \n[25] \"Gambia (the)\"                                              \n[26] \"Guadeloupe\"                                                \n[27] \"Iran (Islamic Republic of)\"                                \n[28] \"Lao People's Democratic Republic (the)\"                    \n[29] \"Marshall Islands (the)\"                                    \n[30] \"Martinique\"                                                \n[31] \"Mayotte\"                                                   \n[32] \"Micronesia (Federated States of)\"                          \n[33] \"Montserrat\"                                                \n[34] \"Myanmar\"                                                   \n[35] \"Netherlands (Kingdom of the)\"                              \n[36] \"Niger (the)\"                                               \n[37] \"Niue\"                                                      \n[38] \"North Macedonia\"                                           \n[39] \"Philippines (the)\"                                         \n[40] \"Puerto Rico\"                                               \n[41] \"Republic of Korea (the)\"                                   \n[42] \"Republic of Moldova (the)\"                                 \n[43] \"Russian Federation (the)\"                                  \n[44] \"R�union\"                                                   \n[45] \"Saint Barth�lemy\"                                          \n[46] \"Saint Kitts and Nevis\"                                     \n[47] \"Saint Lucia\"                                               \n[48] \"Saint Martin (French Part)\"                                \n[49] \"Saint Vincent and the Grenadines\"                          \n[50] \"Sao Tome and Principe\"                                     \n[51] \"Sint Maarten (Dutch Part)\"                                 \n[52] \"Solomon Islands\"                                           \n[53] \"South Georgia and the South Sandwich Islands\"              \n[54] \"State of Palestine (the)\"                                  \n[55] \"Sudan (the)\"                                               \n[56] \"Syrian Arab Republic (the)\"                                \n[57] \"Trinidad and Tobago\"                                       \n[58] \"Turks and Caicos Islands\"                                  \n[59] \"T�rkiye\"                                                   \n[60] \"United Arab Emirates (the)\"                                \n[61] \"United Kingdom of Great Britain and Northern Ireland (the)\"\n[62] \"United Republic of Tanzania (the)\"                         \n[63] \"United States Virgin Islands\"                              \n[64] \"United States of America (the)\"                            \n[65] \"Venezuela (Bolivarian Republic of)\"                        \n[66] \"Viet Nam\"                                                  \n```\n\n\n:::\n:::\n\n\nOkay, we have a lot of unmatched countries — 66! Matching using country name often goes askew 😅 Let's see if the `{countrycode}` package can do any better:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nirena_wide |>\n  mutate(iso3_countrycode = countrycode(country, \"country.name\", \"iso3c\")) |>\n  filter(is.na(iso3_countrycode)) |>\n  select(country, iso3_countrycode) |>\n  distinct()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `iso3_countrycode = countrycode(country, \"country.name\",\n  \"iso3c\")`.\nCaused by warning:\n! Some values were not matched unambiguously: Cura�ao, Kosovo, R�union, Saint Barth�lemy, T�rkiye\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  country          iso3_countrycode\n  <chr>            <chr>           \n1 Cura�ao          <NA>            \n2 Kosovo           <NA>            \n3 R�union          <NA>            \n4 Saint Barth�lemy <NA>            \n5 T�rkiye          <NA>            \n```\n\n\n:::\n:::\n\n\nCountrycode warns about a few match failures (just a few now!), but these mostly appear to be the result of a text encoding error (ie. the source files aren't UTF-8).\n\nI'm having some trouble getting `purrr::map` to work with different encodings, so I might just patch these manually and move on. Let's also get rid of `(the)` and `(... of)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nirena_wide |>\n  mutate(\n    country = case_match(country,\n      \"Cura�ao\" ~ \"Curacao\" ,\n      \"Saint Barth�lemy\" ~ \"Saint Barthélemy\",\n      \"T�rkiye\" ~ \"Turkey\",\n      .default = country),\n    iso3_countrycode = countrycode(country, \"country.name\", \"iso3c\")) |>\n  left_join(centroids, join_by(iso3_countrycode == iso3), multiple = \"all\",\n    unmatched = \"drop\") |>\n  select(-name) |>\n  select(iso3_countrycode, country, lat, lon, year, everything()) ->\nirena_centroids\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `iso3_countrycode = countrycode(country, \"country.name\",\n  \"iso3c\")`.\nCaused by warning:\n! Some values were not matched unambiguously: Kosovo, R�union\n```\n\n\n:::\n:::\n\n\nStill a few non-matches (15), but most of them are quite small and difficult to match. Let's write it out!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nirena_centroids |>\n  write_csv(here(\"data\", \"irena-proportions.csv\"))\n\n# and also the latest data only\nlatest_year <- max(irena_centroids$year, na.rm = TRUE)\nirena_centroids |>\n  filter(year == max(year, na.rm = TRUE)) |>\n  write_csv(here(\"data\", paste0(\"irena-proportions-\", latest_year, \".csv\")))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}